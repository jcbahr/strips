state = {start}
plan = []
stack = {goals}
while stack not empty
  switch t, popped off of stack
    case (in set of goals)
      yay! next one!
    case (unstatisfied conjunctive goal)
      select ordering for subgoals
      push subgoals on to stack
    case (simple unsatisfied goal)
      choose operator that does it
      push operator
      push preconditions of the operator on to stack
    case (operator)
      state += add_list; state -= delete_list
      plan += operator
return plan

set of start state
set of goal state
list for plan
stack for set of nodes


set of start state & goal state
these are lists of fluents - "Fluent" struct

ordered list for the plan
list of actions - just requires the name of the function and the arguments
so char * name, and ids

stack for set of nodes
need to give push, pop commands

stack can have:
	operator
	multiple goals
	single goal (satisfied or unsatisfied)





program name
============
STRIPS C planner using Bison and Flex

SCUBA is a good name
STRIPS
C
but it's been used and isn't google-able

STRIPS planner with bison and flex in c
spwbafic
no

STRIPS algorithm with lisp-y input
sawli - maybe

STRIPS Planner with a LISP style input
spwalsi
spalsi - sounds stupid
spali - no




Do I want these structs as types in yylval?
I think so

typdef struct action_list:
	char * name
	char ** parameters


typedef struct fluent:
	char * var
	char ** obj

	



I want a loop
	print name
	does next exist?
		continue
	else
		stop



start:	(A on B), (B on TABLE)
goal:	(A on TABLE), (B on A)

actions:	(take (X, Y)
			preconditions: (X on Y)
			add: (have X)
			delete: (X on Y)

		(put (X, Y)
			preconditions: (have X)
			add: (X on Y)
			delete: (have X)

__strips__

stack: '(A on TABLE), (B on A)'
plan: ''

pop (A on TABLE) off of the stack
is there an action that results in (A on TABLE)?
(put (A, TABLE)) does it

stack: '(have A), (put (A on TABLE)), (B on TABLE)'
plan: ''

pop (have A) off of the stack
is there an action that results in (have A)?
(take (A, ?!?!)) does it				This is the variable instantiation problem




(put B C)
	pre		(clear C)
	pre		(have B)
	add		(on B C)
	add		(clear B)
	del		(clean C)
	del		(have B)
(put A B)
	pre		(clear B)
	pre		(have A)
	add		(on A B)
	add		(clear A)
	del		(clear B)
	del		(have A)


(put B C)
	pre		(clear C)
	pre		(have B)
	del		(clean C)
	del		(have B)
	add		(on B C)
!	add		(clear B)
(put A B)
!	pre		(clear B)
	pre		(have A)
	add		(on A B)
	add		(clear A)
	del		(clear B)
	del		(have A)

ordered because more cancellations when (put B C) is first

(put B C)
	pre		(clear C)
	pre		(have B)
	del		(clean C)
	del		(have B)
	add		(on B C)
(put A B)
	pre		(have A)
	add		(on A B)
	add		(clear A)
	del		(clear B)
	del		(have A)


(put B C)
	pre		(clear C)
	pre		(have B)
	del		(clean C)
	del		(have B)
	add		(on B C)
(put A B)
	pre		(have A)
	add		(on A B)
	add		(clear A)
	del		(clear B)
	del		(have A)
